var documenterSearchIndex = {"docs":
[{"location":"selections/#selections","page":"Selections","title":"Selection functions","text":"","category":"section"},{"location":"selections/","page":"Selections","title":"Selections","text":"The select function can be used to select subsets of atoms from a vector of atoms. A simple selection syntax can be used, for example: ","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"atoms = select(atoms, \"protein and resnum < 30\")","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"or standard Julia function can be provided as the second argument:","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"atoms = select(atoms, at -> isprotein(at) && resnum(at) < 30)","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"compat: Compat\nSupport for the second argument of select as a function was introduced in v1.7.0.","category":"page"},{"location":"selections/#General-selection-syntax","page":"Selections","title":"General selection syntax","text":"","category":"section"},{"location":"selections/","page":"Selections","title":"Selections","text":"Accepted Boolean operators: and, or, and not. ","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"The accepted keywords for the selection are: ","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"Keyword Options Input value Example\nindex =,>,<,<=,>= Integer index <= 10\nindex_pdb =,>,<,<=,>= Integer index_pdb <= 10\nname  String name CA\nelement  String element N\nresname  String resname ALA\nresnum =,>,<,<=,>= Integer resnum = 10\nresidue =,>,<,<=,>= Integer residue = 10\nchain  String chain A\nmodel  Integer model 1\nbeta =,>,<,<=,>= Real beta > 0.5\noccup =,>,<,<=,>= Real occup >= 0.3\nsegname  String segname PROT\n   ","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"note: Note\nresnum is the residue number as written in the PDB file, while residue is the residue number counted sequentially in the file.index_pdb is the number written in the \"atom index\" field of the PDB file, while index is the sequential index of the atom in the file. ","category":"page"},{"location":"selections/#Special-macros:-proteins,-water","page":"Selections","title":"Special macros: proteins, water","text":"","category":"section"},{"location":"selections/","page":"Selections","title":"Selections","text":"Just use these keywords to select the residues matching the properties desired. ","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"Examples:","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"aromatic = select(atoms,\"aromatic\")\n","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"aromatic = select(atoms,\"charged\")\n","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"Available keywords:","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"Keywords  \nwater  \nprotein backbone sidechain\nacidic basic \naliphatic aromatic \ncharged neutral \npolar nonpolar \nhydrophobic  \n  ","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"note: Note\nThe properties refer to protein residues and will return false to every non-protein residue. Thus, be careful with the use of not with these selections, as they might retrieve non-protein atoms.","category":"page"},{"location":"selections/#Retrieving-indices,-filtering,-etc","page":"Selections","title":"Retrieving indices, filtering, etc","text":"","category":"section"},{"location":"selections/","page":"Selections","title":"Selections","text":"compat: Compat\nThe Select object was implemented in PDBTools v1.1.0. The  sel\"\" string macro was implemented in PDBTools v1.2.0.","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"If only the indices of the atoms are of interest, the Julia findall function can be used, by passing a Select object, or a regular  function, to select the atoms:","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"julia> using PDBTools\n\njulia> atoms = readPDB(PDBTools.TESTPDB, \"protein and residue <= 3\");\n\njulia> findall(Select(\"name CA\"), atoms)\n3-element Vector{Int64}:\n  5\n 15\n 26\n\njulia> findall(at -> name(at) == \"CA\", atoms)\n3-element Vector{Int64}:\n  5\n 15\n 26","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"note: Note\nAll indexing is 1-based. Thus, the first atom of the structure is atom 1.","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"The Select constructor can be used to feed simple selection syntax entries to  other Julia functions, such as findfirst, findlast, or filter:","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"julia> using PDBTools\n\njulia> atoms = readPDB(PDBTools.TESTPDB, \"protein and residue <= 3\");\n\njulia> filter(Select(\"name CA\"), atoms)\n   Array{Atoms,1} with 3 atoms with fields:\n   index name resname chain   resnum  residue        x        y        z occup  beta model segname index_pdb\n       5   CA     ALA     A        1        1   -8.483  -14.912   -6.726  1.00  0.00     1    PROT         5\n      15   CA     CYS     A        2        2   -5.113  -13.737   -5.466  1.00  0.00     1    PROT        15\n      26   CA     ASP     A        3        3   -3.903  -11.262   -8.062  1.00  0.00     1    PROT        26\n\njulia> findfirst(Select(\"beta = 0.00\"), atoms)\n1","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"tip: Tip\nThe sel\"\" literal string macro is a shortcut for Select. Thus, these syntaxes are valid:julia> using PDBTools\n\njulia> atoms = readPDB(PDBTools.TESTPDB, \"protein and residue <= 3\");\n\njulia> name.(filter(sel\"name CA\", atoms))\n3-element Vector{String}:\n \"CA\"\n \"CA\"\n \"CA\"\n\njulia> findfirst(sel\"name CA\", atoms)\n5","category":"page"},{"location":"selections/#Use-Julia-functions-directly","page":"Selections","title":"Use Julia functions directly","text":"","category":"section"},{"location":"selections/","page":"Selections","title":"Selections","text":"Selections can be done using Julia functions directly, providing a greater control over the selection and, possibly, the use of user defined selection  functions. For example:","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"myselection(atom) = (atom.x < 10.0 && atom.resname == \"GLY\") || (atom.name == \"CA\") \natoms = select(atoms, myselection)","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"or, for example, using Julia anonymous functions","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"select(atoms, at -> isprotein(at) && name(at) == \"O\" && atom.x < 10.0)","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"The only requirement is that the function defining the selection receives an PDBTools.Atom as input, and returns true or false depending on the conditions required for the atom.","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"note: Note\nThe macro-keywords described in the previous section can be used within  the Julia function syntax, but the function names start with is. For example:select(atoms, at -> isprotein(at) && resnum(at) in [ 1, 5, 7 ])Thus, the macro selection functions are: iswater,  isprotein,     isbackbone,    issidechain, isacidic,      isbasic,                   isaliphatic,   isaromatic,                ischarged,     isneutral,                 ispolar,       isnonpolar,                and ishydrophobic.                          ","category":"page"},{"location":"selections/#Iterate-over-residues-(or-molecules)","page":"Selections","title":"Iterate over residues (or molecules)","text":"","category":"section"},{"location":"selections/","page":"Selections","title":"Selections","text":"The eachresidue iterator allows iteration over the resiudes of a structure (in PDB files distinct molecules are associated to different residues, thus this iterates similarly over the molecules of a structure). For example:","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"julia> using PDBTools\n\njulia> protein = readPDB(PDBTools.SMALLPDB);\n\njulia> count(atom -> resname(atom) == \"ALA\", protein)\n12\n\njulia> count(res -> resname(res) == \"ALA\", eachresidue(protein))\n1","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"The result of the iterator can also be collected, with:","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"julia> using PDBTools\n\njulia> protein = readPDB(PDBTools.SMALLPDB);\n\njulia> residues = collect(eachresidue(protein))\n   Array{Residue,1} with 3 residues.\n\njulia> residues[1]\n Residue of name ALA with 12 atoms.\n   index name resname chain   resnum  residue        x        y        z occup  beta model segname index_pdb\n       1    N     ALA     A        1        1   -9.229  -14.861   -5.481  0.00  0.00     1    PROT         1\n       2 1HT1     ALA     A        1        1  -10.048  -15.427   -5.569  0.00  0.00     1    PROT         2\n       3  HT2     ALA     A        1        1   -9.488  -13.913   -5.295  0.00  0.00     1    PROT         3\n                                                       ⋮\n      10  HB3     ALA     A        1        1   -9.164  -15.063   -8.765  1.00  0.00     1    PROT        10\n      11    C     ALA     A        1        1   -7.227  -14.047   -6.599  1.00  0.00     1    PROT        11\n      12    O     ALA     A        1        1   -7.083  -13.048   -7.303  1.00  0.00     1    PROT        12","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"These residue vector do not copy the data from the original atom vector. Therefore, changes performed on these vectors will be reflected on the original data.  ","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"It is possible also to iterate over the atoms of one or more residue:","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"julia> using PDBTools\n\njulia> protein = readPDB(PDBTools.SMALLPDB);\n\njulia> m_ALA = 0.\n       for residue in eachresidue(protein)\n         if name(residue) == \"ALA\"\n           for atom in residue\n             m_ALA += mass(atom)\n           end\n         end\n       end\n       m_ALA\n73.09488999999999","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"Which, in this simple example, results in the same as:","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"julia> sum(mass(at) for at in protein if resname(at) == \"ALA\" )\n73.09488999999999","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"or","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"julia> sum(mass(res) for res in eachresidue(protein) if resname(res) == \"ALA\" )\n73.09488999999999","category":"page"},{"location":"selections/#Using-VMD","page":"Selections","title":"Using VMD","text":"","category":"section"},{"location":"selections/","page":"Selections","title":"Selections","text":"VMD is a very popular and powerful package for visualization of simulations. It contains a very versatile library to read topologies and trajectory files, and a powerful selection syntax. We provide here a wrapper to VMD which allows using its capabilities.  ","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"compat: Compat\nThe select_with_vmd with all the described cababilities is available in PDBTools v1.0.0 or greater.","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"For example, the solute can be defined with: ","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"indices, names = select_with_vmd(\"./system.gro\",\"protein\",vmd=\"/usr/bin/vmd\")","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"The output will contain two lists, one of atom indices (one-based) and atom names. The indices correspond to sequential indices in the input, not the indices written in the PDB file, for example.","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"The input may also be a vector of atoms of type PDBTools.Atom:","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"atoms = readPDB(\"mypdbfile.pdb\")\nindices, names = select_with_vmd(atoms,\"protein\",vmd=\"/usr/bin/vmd\")","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"tip: Tip\nIf vmd is available in your path, there is no need to pass it as a keyword parameter.","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"The main advantage here is that all the file types and the complete selection syntax  that VMD supports are supported. But VMD needs to be installed and is run in background, and it takes a few seconds to run.","category":"page"},{"location":"selections/#Loading-vmd-scripts","page":"Selections","title":"Loading vmd scripts","text":"","category":"section"},{"location":"selections/","page":"Selections","title":"Selections","text":"The select_with_vmd function also accepts an optional keyword parameter srcload, which can be used to load custom scripts within vmd before running setting the selection. This allows the definition of tcl scripts with custom selection macros, for instance. The usage would be: ","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"sel = select_with_vmd(\"file.pdb\", \"resname MYRES\"; srcload = [ \"mymacros1.tcl\", \"mymacros2.tcl\" ])","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"Which corresponds to sourceing each of the macro files in VMD before defining the  selection with the custom MYRES name.","category":"page"},{"location":"selections/","page":"Selections","title":"Selections","text":"warning: Warning\nVMD uses 0-based indexing and select_with_vmd adjusts that. However, if a selection is performed by index, as with index 1, VMD will select the second atom, and the output will be [2]. Selections by type, name, segment, residue name, etc, will be consistent with one-based indexing.","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"CollapsedDocStrings = true","category":"page"},{"location":"auxiliary/#Some-auxiliary-functions-to-quickly-retrieve-some-data","page":"Auxiliary functions","title":"Some auxiliary functions to quickly retrieve some data","text":"","category":"section"},{"location":"auxiliary/#Get-the-protein-sequence","page":"Auxiliary functions","title":"Get the protein sequence","text":"","category":"section"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"getseq","category":"page"},{"location":"auxiliary/#PDBTools.getseq","page":"Auxiliary functions","title":"PDBTools.getseq","text":"getseq(Vector{Atom} or filename; selection, code)\n\nReturns the sequence of aminoacids from the vector of atoms or file name. Selections may be applied. Code defines if the output will be a one-letter, three-letter or full-residue name array.\n\nExample\n\njulia> protein = wget(\"1LBD\");\n\njulia> getseq(protein,\"residue < 3\")\n2-element Vector{String}:\n \"S\"\n \"A\"\n\njulia> getseq(protein,\"residue < 3\", code=2)\n2-element Vector{String}:\n \"SER\"\n \"ALA\"\n\njulia> getseq(protein,\"residue < 3\",code=3)\n2-element Vector{String}:\n \"Serine\"\n \"Alanine\"\n\n\n\n\n\n\n","category":"function"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"To obtain a list of the residue names of the protein with three- and one-letter codes, use","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"julia> using PDBTools\n\njulia> getseq(PDBTools.SMALLPDB)\n3-element Vector{String}:\n \"A\"\n \"C\"\n \"D\"","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"Use getseq(atoms,code=2) to get the sequence as three-letter residue codes, or code=3 to get  full natural-aminoacid names, like \"Alanine\", \"Proline\", etc:","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"julia> using PDBTools\n\njulia> getseq(PDBTools.SMALLPDB, code=2)\n3-element Vector{String}:\n \"ALA\"\n \"CYS\"\n \"ASP\"\n\njulia> getseq(PDBTools.SMALLPDB, code=3)\n3-element Vector{String}:\n \"Alanine\"\n \"Cysteine\"\n \"Aspartic acid\"","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"note: Note\nIf there is some non-standard protein residue in the sequence, inform the getseq function by adding a selection:julia> using PDBTools\n\njulia> atoms = readPDB(PDBTools.SMALLPDB);\n\njulia> for at in atoms\n          if resname(at) == \"ALA\"\n              at.resname = \"NEW\"\n          end\n       end\n\njulia> getseq(atoms, \"protein or resname NEW\"; code=2)\n3-element Vector{String}:\n \"NEW\"\n \"CYS\"\n \"ASP\"By default the selection will only return the sequence of natural amino acids. ","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"The getseq function can of course be used on an Atom list, accepts selections as the last argument, as well as the reading and writing functions:","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"julia> using PDBTools\n\njulia> atoms = readPDB(PDBTools.SMALLPDB);\n\njulia> getseq(atoms, \"residue > 1\")\n2-element Vector{String}:\n \"C\"\n \"D\"","category":"page"},{"location":"auxiliary/#Distance-between-sets-of-atoms","page":"Auxiliary functions","title":"Distance between sets of atoms","text":"","category":"section"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"distance","category":"page"},{"location":"auxiliary/#PDBTools.distance","page":"Auxiliary functions","title":"PDBTools.distance","text":"distance(x,y)\n\nComputes the minimum distance between two sets of atoms, between an atom and a set of atoms, or simply  the distance between two atoms. The input may be a vector of Atoms, or the  coordinates that are output of the coor function. \n\nExamples\n\njulia> model = wget(\"1BSX\");\n\njulia> protein = select(model,\"protein\");\n\njulia> ligand = select(model,\"resname T3\");\n\njulia> distance(protein,ligand)\n2.7775834820937417\n\njulia> distance(protein[1],ligand[3])\n36.453551075306784\n\njulia> distance(coor(ligand),protein)\n2.7775834820937417\n\n\n\n\n\n\n","category":"function"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"The distance between atoms, or sets of atoms, can be computed with the distance function. This function returns the minimum distance between the atoms of the sets involved. For example:","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"julia> using PDBTools\n\njulia> model = wget(\"1BSX\");\n\njulia> protein = select(model,\"protein\");\n\njulia> ligand = select(model,\"resname T3\");\n\njulia> distance(protein,ligand)\n2.7775834820937417","category":"page"},{"location":"auxiliary/#Closest-atoms-and-their-distance","page":"Auxiliary functions","title":"Closest atoms and their distance","text":"","category":"section"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"A function similar to the one above is closest, which returns the shortest distance between atoms but also the identity of the atom or pair of atoms that satisfy that shortest distance:","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"julia> using PDBTools\n\njulia> model = wget(\"1BSX\");\n\njulia> protein = select(model,\"protein\");\n\njulia> ligand = select(model,\"resname T3\");\n\njulia> closest(ligand,protein)\n(43, 3684, 2.7775834820937417)\n\njulia> ligand[43]\n    4037   O1      T3     B        2      512  -22.568   81.625    3.159  1.00 36.59     1       -      4041\n\njulia> protein[3684]\n    3684  NE2     HIS     B      435      472  -21.539   82.145    5.686  1.00 44.44     1       -      3686\n\njulia> distance(ligand[43],protein[3684])\n2.7775834820937417","category":"page"},{"location":"auxiliary/#Obtain-arrays-with-coordinates","page":"Auxiliary functions","title":"Obtain arrays with coordinates","text":"","category":"section"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"coor","category":"page"},{"location":"auxiliary/#PDBTools.coor","page":"Auxiliary functions","title":"PDBTools.coor","text":"coor(atoms; selection)\n\nReturns the coordinates of the atoms. The input may be one atom (type Atom), a vector of atoms, or a Residue.  The coordinates are returned as a vector of static vectors (from StaticArrays), more specifically as a Vector{SVector{3,Float64}}.\n\nExamples\n\njulia> using PDBTools, StaticArrays \n\njulia> protein = wget(\"1LBD\");\n\njulia> coor(protein[1])\n3-element SVector{3, Float64} with indices SOneTo(3):\n 45.228\n 84.358\n 70.638\n\njulia> coor(protein[1],as=SVector{3,Float32})\n3-element SVector{3, Float32} with indices SOneTo(3):\n 45.228\n 84.358\n 70.638\n\njulia> coor(protein, \"index <= 2\")\n2-element Vector{SVector{3, Float64}}:\n [45.228, 84.358, 70.638]\n [46.08, 83.165, 70.327]\n\njulia> coor(protein, only = at -> at.resname == \"ALA\")\n110-element Vector{SVector{3, Float64}}:\n [43.94, 81.982, 70.474]\n [43.02, 80.825, 70.455]\n [41.996, 80.878, 69.34]\n ⋮\n [-17.866, 84.088, 51.741]\n [-18.496, 83.942, 52.777]\n [-15.888, 82.583, 51.706]\n  \njulia> residues = collect(eachresidue(protein));\n\njulia> coor(residues[1])\n6-element Vector{SVector{3, Float64}}:\n [45.228, 84.358, 70.638]\n [46.08, 83.165, 70.327]\n [45.257, 81.872, 70.236]\n [45.823, 80.796, 69.974]\n [47.147, 82.98, 71.413]\n [46.541, 82.639, 72.662]\n\n\n\n\n\n\n","category":"function"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"Use the coor function:","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"julia> using PDBTools\n\njulia> atoms = readPDB(PDBTools.SMALLPDB);\n\njulia> coor(atoms[1])\n3-element StaticArraysCore.SVector{3, Float64} with indices SOneTo(3):\n  -9.229\n -14.861\n  -5.481\n\njulia> coor(atoms[1:2])\n2-element Vector{StaticArraysCore.SVector{3, Float64}}:\n [-9.229, -14.861, -5.481]\n [-10.048, -15.427, -5.569]","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"The coor function accepts selections:","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"Calpha coordinates:","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"julia> using PDBTools\n\njulia> atoms = readPDB(PDBTools.SMALLPDB);\n\njulia> coor(atoms, \"name CA\")\n3-element Vector{StaticArraysCore.SVector{3, Float64}}:\n [-8.483, -14.912, -6.726]\n [-5.113, -13.737, -5.466]\n [-3.903, -11.262, -8.062]","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"The coordinates are output as arrays of static arrays (more specifically, as a Vector{SVector{3,Float64}}, from StaticArrays). ","category":"page"},{"location":"auxiliary/#Maximum-and-minimum-coordinates-of-the-atoms","page":"Auxiliary functions","title":"Maximum and minimum coordinates of the atoms","text":"","category":"section"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"maxmin","category":"page"},{"location":"auxiliary/#PDBTools.maxmin","page":"Auxiliary functions","title":"PDBTools.maxmin","text":"maxmin(atoms::Vector{Atom}; selection)\n\nReturns the maximum and minimum coordinates of an atom vector, and the length (maximum minus minimum) in each direction. \n\nExample\n\njulia> protein = wget(\"1LBD\");\n\njulia> maxmin(protein)\n \n Minimum atom coordinates: xmin = [-29.301, 57.178, 45.668]\n Maximum atom coordinates: xmax = [47.147, 99.383, 86.886]\n Length in each direction: xlength = [76.448, 42.205, 41.217999999999996]\n\n\n\n\n\n\n","category":"function"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"Use maxmin(atoms), or maxmin(atoms,\"resname CA\"), for example:","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"julia> using PDBTools\n\njulia> atoms = readPDB(PDBTools.SMALLPDB);\n\njulia> maxmin(atoms, \"residue > 1\")\n Minimum atom coordinates: xmin = [-6.974, -16.785, -10.863]\n Maximum atom coordinates: xmax = [-1.94, -9.552, -3.844]\n Length in each direction: xlength = [5.034000000000001, 7.2330000000000005, 7.019]","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"m is a structure containing the three vectors with minimum and maximum coordinates, and lengths.","category":"page"},{"location":"auxiliary/#Residue-tick-labels-for-plots","page":"Auxiliary functions","title":"Residue tick labels for plots","text":"","category":"section"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"residue_ticks","category":"page"},{"location":"auxiliary/#PDBTools.residue_ticks","page":"Auxiliary functions","title":"PDBTools.residue_ticks","text":"residue_ticks(\n    atoms (or) residues (or) residue iterator; \n    first=nothing, last=nothing, stride=1, oneletter=true, serial=true\n)\n\nReturns a tuple with residue numbers and residue names for the given atoms, to be used as tick labels in plots.\n\nThe structure data can be provided a vector of Atoms, a vector of Residues or an EachResidue iterator. \n\nfirst and last optional keyword parameters are integers that refer to the residue numbers to be included.  The stride option can be used to skip residues and declutter the tick labels.\n\nIf oneletter is false, three-letter residue codes are returned. Residues with unknown names will be  named X or XXX. \n\nIf serial=true the sequential residue index will be used as the index of the ticks. If instead serial=false, the positions will be set to the residue numbers.\n\nExamples\n\njulia> using PDBTools\n\njulia> atoms = wget(\"1LBD\", \"protein\");\n\njulia> residue_ticks(atoms; stride=50) # Vector{Atom} as input\n(1:50:201, [\"S225\", \"Q275\", \"L325\", \"L375\", \"L425\"])\n\njulia> residue_ticks(atoms; first=235, last=240, serial=false) # first=10 and resnum indexing\n([235, 236, 237, 238, 239, 240], [\"I235\", \"L236\", \"E237\", \"A238\", \"E239\", \"L240\"])\n\njulia> residue_ticks(eachresidue(atoms); stride=50) # residue iterator as input\n(1:50:201, [\"S225\", \"Q275\", \"L325\", \"L375\", \"L425\"])\n\njulia> residue_ticks(collect(eachresidue(atoms)); stride=50) # Vector{Residue} as input\n(1:50:201, [\"S225\", \"Q275\", \"L325\", \"L375\", \"L425\"])\n\nThe resulting tuple of residue numbers and labels can be used as xticks in Plots.plot, for example.\n\n\n\n\n\n","category":"function"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"The residue_ticks function provides a practical way to define tick labels in plots associated to an amino-acid sequence:","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"residue_ticks(\n    atoms (or) residues (or) residue iterator; \n    first=nothing, last=nothing, stride=1, oneletter=true, serial=false,\n)","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"The input structure can be provided as a vector of atoms (type Vector{Atom}) a residue iterator (obtained by eachresidue(atoms)) or a vector of residues (obtained by collect(eachresidue(atoms))). ","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"The function returns a tuple with residue numbers and residue names for the given atoms, to be used as tick labels in plots.","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"first and last optional keyword parameters are integers that refer to the residue numbers to be included.  The stride option can be used to skip residues and declutter the tick labels.","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"If oneletter is false, three-letter residue codes are returned. Residues with unknown names will be  named X or XXX. ","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"if serial=false the positions of the ticks will be returned as a the serial residue index in the structure. If serial=true the positions of the ticks are returned as their residue numbers. This difference is important if the residue numbers do not start at 1 and depending on the indexing of the data to be plotted.  ","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"compat: Compat\nThe functionality of the residue_ticks as described requires PDBTools version 1.6.0 or greater. The serial option was introduced in v1.8.1","category":"page"},{"location":"auxiliary/#Example","page":"Auxiliary functions","title":"Example","text":"","category":"section"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"Here we illustrate how to plot the average temperature factor of each residue of a crystallographic model as function of the residues.","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"julia> using PDBTools, Plots\n\njulia> atoms = wget(\"1UBQ\", \"protein\");\n\njulia> residue_ticks(atoms; stride=10) # example of output\n([1, 11, 21, 31, 41, 51, 61, 71], [\"M1\", \"K11\", \"D21\", \"Q31\", \"Q41\", \"E51\", \"I61\", \"L71\"])\n\njulia> plot(\n           resnum.(eachresidue(atoms)), # x-axis: residue numbers\n           [ mean(beta.(res)) for res in eachresidue(atoms) ], # y-axis: average b-factor per residue\n           xlabel=\"Residue\", \n           xticks=residue_ticks(atoms; stride=10), # here we define the x-tick labels\n           ylabel=\"b-factor\", \n           xrotation=60,\n           label=nothing, framestyle=:box,\n      )","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"Produces the following plot:","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"(Image: ./assets/residue_ticks.png)","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"Alternatively (and sometimes conveniently), the residue ticks can be obtained by providing,  instead of the atoms array, the residue iterator or the residue vector, as:","category":"page"},{"location":"auxiliary/","page":"Auxiliary functions","title":"Auxiliary functions","text":"julia> residue_ticks(eachresidue(atoms); stride=10)\n([1, 11, 21, 31, 41, 51, 61, 71], [\"M1\", \"K11\", \"D21\", \"Q31\", \"Q41\", \"E51\", \"I61\", \"L71\"])\n\njulia> residue_ticks(collect(eachresidue(atoms)); stride=10)\n([1, 11, 21, 31, 41, 51, 61, 71], [\"M1\", \"K11\", \"D21\", \"Q31\", \"Q41\", \"E51\", \"I61\", \"L71\"])","category":"page"},{"location":"elements/#Atomic-and-molecular-properties","page":"Element properties","title":"Atomic and molecular properties","text":"","category":"section"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"Some simple atom properties can be retrieved using special functions, which operate on atoms of the type Atom. For example:","category":"page"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"julia> atoms = readPDB(\"./file.pdb\");\n\njulia> printatom(atoms[1])\n   index name resname chain   resnum  residue        x        y        z  beta occup model segname index_pdb\n       1   OW     SOL     X        1        1   54.370   45.310   33.970  0.00  0.00     1       -         1\n\njulia> mass(atoms[1])\n14.0067\n\njulia> atomic_number(atoms[1])\n7\n\njulia> element(atoms[1])\n\"N\"\n\njulia> element_name(atoms[1])\n\"Nitrogen\"","category":"page"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"The formula or stoichiometry of a selection can also be retrieved:","category":"page"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"julia> atoms = wget(\"1LBD\",\"protein and residue 1\");\n\njulia> f = formula(atoms)\nC₃N₁O₂\n\njulia> stoichiometry(select(atoms,\"water\"))\nH₂O₁\n","category":"page"},{"location":"elements/#AtomsBase-compatibility","page":"Element properties","title":"AtomsBase compatibility","text":"","category":"section"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"compat: Compat\nThis interface requires at least PDBTools version 0.14.2.","category":"page"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"The following functions are supported as part of the API, to conform the AtomsBase interface:","category":"page"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"Function Example Output\natomic_number(::PDBTools.Atom) atomic_number(Atom(name=\"NE2\")) 7\natomic_symbol(::PDBTools.Atom) atomic_symbol(Atom(name=\"NE2\")) :N\natomic_mass(::PDBTools.Atom) atomic_mass(Atom(name=\"NE2\")) 14.0067\nposition(::PDBTools.Atom) position(Atom(name=\"NE2\")) SVector{3,Float64}(0,0,0)","category":"page"},{"location":"elements/#Custom-Atom-fields","page":"Element properties","title":"Custom Atom fields","text":"","category":"section"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"compat: Compat\nCustom field support was introduced on PDBTools version 0.14.3.","category":"page"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"Custom atom fields can be added to an Atom object by defining the custom dictionary. The fields can be accessed by the standard dot syntax if the field name does not clash  with an existing Atom field, or by the custom_field getter function. ","category":"page"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"For example:","category":"page"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"julia> atom = Atom(index = 0; custom=Dict(:c => \"c\", :index => 1))\n       0    X     XXX     X        0        0    0.000    0.000    0.000  0.00  0.00     0    XXXX         0\n\njulia> atom.c\n\"c\"\n\njulia> atom.index\n0\n\njulia> custom_field(atom, :index)\n1","category":"page"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"Setting new custom fields follow the standard Julia dictionary syntax:","category":"page"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"julia> atom.custom[:new] = \"NEW\"\n\"NEW\"\n\njulia> atom.new\n\"NEW\"\n\njulia> custom_field(atom, :new)\n\"NEW\"","category":"page"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"compat: Compat\nThe following feature was introduced in PDBTools version 0.14.4.","category":"page"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"If a custom field with the :mass key is added to the atom, the mass function returns the mass set at that field: ","category":"page"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"julia> using PDBTools\n\njulia> atom = Atom();\n\njulia> atom.custom[:mass] = 10.0\n10.0\n\njulia> mass(atom)\n10.0","category":"page"},{"location":"elements/#Elements-for-custom-atom-types","page":"Element properties","title":"Elements for custom atom types","text":"","category":"section"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"compat: Compat\nThe add_element! function was introduced in version 1.4.0.","category":"page"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"The types of atoms that PDBTools recognizes is defined in the PDBTools.elements dictionary.  If new atom types are defined, it is possible to add these types to the dictionary, such that other functions work for the new types. The function to be used is add_element!.","category":"page"},{"location":"elements/","page":"Element properties","title":"Element properties","text":"add_element!\nremove_custom_elements!","category":"page"},{"location":"elements/#PDBTools.add_element!","page":"Element properties","title":"PDBTools.add_element!","text":"add_element!(symbol::String, reference_element::PDBTools.Element; elements=PDBTools.elements)\n\nAdd a new element to the elements dictionary. If the element already exists, overwrite it.\n\nTo remove all custom elements, use remove_custom_elements!().\n\nExample\n\njulia> using PDBTools\n\njulia> remove_custom_elements!(); # if any\n\njulia> atoms = [ Atom(name=\"A1\"), Atom(name=\"A2\") ];\n\njulia> add_element!(\"A1\", PDBTools.elements[\"C\"])\nPDBTools.Element(:C, \"C\", \"Carbon\", 6, 12.011, true)\n\njulia> add_element!(\"A2\", PDBTools.elements[\"N\"])\nPDBTools.Element(:N, \"N\", \"Nitrogen\", 7, 14.0067, true)\n\njulia> element(atoms[1])\n\"C\"\n\njulia> element(atoms[2])\n\"N\"\n\njulia> mass(atoms)\n26.017699999999998\n\njulia> remove_custom_elements!(); \n\nHere we repeteadly call remove_custom_elements!() to guarantee the proper execution of the test codes, without any custom elements predefined.\n\n\n\n\n\n","category":"function"},{"location":"elements/#PDBTools.remove_custom_elements!","page":"Element properties","title":"PDBTools.remove_custom_elements!","text":"remove_custom_elements!()\n\nRemove all custom elements from the elements dictionary.\n\nExample\n\njulia> using PDBTools\n\njulia> remove_custom_elements!();\n\njulia> add_element!(\"GN\", PDBTools.elements[\"N\"])\nPDBTools.Element(:N, \"N\", \"Nitrogen\", 7, 14.0067, true)\n\njulia> element(Atom(name=\"GN\"))\n\"N\"\n\njulia> remove_custom_elements!();\n\njulia> element(Atom(name=\"GN\")) # returns `nothing`\n\n\nHere we repeteadly call remove_custom_elements!() to guarantee the proper execution of the test codes, without any custom elements predefined.\n\n\n\n\n\n","category":"function"},{"location":"help/","page":"Help entries","title":"Help entries","text":"CollapsedDocStrings = true","category":"page"},{"location":"help/#Help-entries","page":"Help entries","title":"Help entries","text":"","category":"section"},{"location":"help/","page":"Help entries","title":"Help entries","text":"These entries can be accessed from the Julia REPL by typing ?, for example,","category":"page"},{"location":"help/","page":"Help entries","title":"Help entries","text":"julia> ? mass\nsearch: mass mapslices MathConstants makedocs set_zero_subnormals get_zero_subnormals mutable struct\n\n  mass(name::String or atom::Atom or Vector{Atom})\n\n  Returns the mass of an atom given its name, or Atom structure, or the total mass of a vector of Atoms.\n\n  Example\n  –––––––––\n\n  julia> atoms = [ Atom(name=\"NT3\"), Atom(name=\"CA\") ];\n  \n  julia> mass(atoms[1])\n  14.0067\n  \n  julia> mass(\"CA\")\n  12.011\n  \n  julia> mass(atoms)\n  26.017699999999998\n","category":"page"},{"location":"help/","page":"Help entries","title":"Help entries","text":"Modules=[PDBTools]","category":"page"},{"location":"help/#PDBTools.Atom","page":"Help entries","title":"PDBTools.Atom","text":"Atom::DataType\n\nStructure that contains the atom properties. It is mutable, so it can be edited.  Fields:\n\nmutable struct Atom\n    index::Int # The sequential index of the atoms in the file\n    index_pdb::Int # The index as written in the PDB file (might be anything)\n    name::String # Atom name\n    resname::String # Residue name\n    chain::String # Chain identifier\n    resnum::Int # Number of residue as written in PDB file\n    residue::Int # Sequential residue (molecule) number in file\n    x::Float64 # x coordinate\n    y::Float64 # y coordinate\n    z::Float64 # z coordinate\n    beta::Float64 # temperature factor\n    occup::Float64 # occupancy\n    model::Int # model number\n    segname::String # Segment name (cols 73:76)\n    pdb_element::String # Element symbol string (cols 77:78)\n    charge::String # Charge (cols: 79:80)\n    custom::Dict{Symbol, Any} # Custom fields\nend\n\nExample\n\njulia> using PDBTools\n\njulia> atoms = readPDB(PDBTools.SMALLPDB)\n   Array{Atoms,1} with 35 atoms with fields:\n   index name resname chain   resnum  residue        x        y        z occup  beta model segname index_pdb\n       1    N     ALA     A        1        1   -9.229  -14.861   -5.481  0.00  0.00     1    PROT         1\n       2 1HT1     ALA     A        1        1  -10.048  -15.427   -5.569  0.00  0.00     1    PROT         2\n       3  HT2     ALA     A        1        1   -9.488  -13.913   -5.295  0.00  0.00     1    PROT         3\n                                                       ⋮\n      33  OD2     ASP     A        3        3   -6.974  -11.289   -9.300  1.00  0.00     1    PROT        33\n      34    C     ASP     A        3        3   -2.626  -10.480   -7.749  1.00  0.00     1    PROT        34\n      35    O     ASP     A        3        3   -1.940  -10.014   -8.658  1.00  0.00     1    PROT        35\n\njulia> resname(atoms[1])\n\"ALA\"\n\njulia> chain(atoms[1])\n\"A\"\n\njulia> element(atoms[1])\n\"N\"\n\njulia> mass(atoms[1])\n14.0067\n\njulia> position(atoms[1])\n3-element StaticArraysCore.SVector{3, Float64} with indices SOneTo(3):\n  -9.229\n -14.861\n  -5.481\n\nThe pdb_element and charge fields, which are frequently left empty in PDB files, are not printed.  The direct access to the fields is considered part of the interface.\n\nCustom fields can be set on Atom construction with the custom keyword argument, which receives a  Dict{Symbol,Any} as parameter. They can be retrieved with the custom_field function or, if the custom  field names does not overlap with an existing field, with the dot syntax. Requires PDBTools > 0.14.3.\n\nExample\n\njulia> using PDBTools\n\njulia> atom = Atom(index = 0; custom=Dict(:c => \"c\", :index => 1));\n\njulia> atom.c\n\"c\"\n\njulia> index(atom)\n0\n\njulia> custom_field(atom, :index)\n1\n\n\n\n\n\n","category":"type"},{"location":"help/#PDBTools.Residue","page":"Help entries","title":"PDBTools.Residue","text":"Residue(atoms::AbstractVector{Atom}, range::UnitRange{Int})\n\nResidue data structure. It contains two fields: atoms which is a vector of Atom elements, and range, which indicates which atoms of the atoms vector compose the residue.\n\nThe Residue structure carries the properties of the residue or molecule of the atoms it contains, but it does not copy the original vector of atoms, only the residue meta data for each residue.\n\nExample\n\njulia> pdb = wget(\"1LBD\");\n\njulia> residues = collect(eachresidue(pdb))\n   Array{Residue,1} with 238 residues.\n\njulia> resnum.(residues[1:3])\n3-element Vector{Int64}:\n 225\n 226\n 227\n\njulia> residues[5].chain\n\"A\"\n\njulia> residues[8].range\n52:58\n\n\n\n\n\n\n","category":"type"},{"location":"help/#PDBTools.Select","page":"Help entries","title":"PDBTools.Select","text":"Select\n\nThis structure acts a function when used within typical julia filtering functions,  by converting a string selection into a call to query call. \n\nExample\n\nUsing a string to select the CA atoms of the first residue:\n\njulia> using PDBTools\n\njulia> atoms = readPDB(PDBTools.TESTPDB, \"protein\");\n\njulia> findfirst(Select(\"name CA\"), atoms)\n5\n\njulia> filter(Select(\"name CA and residue 1\"), atoms)\n   Array{Atoms,1} with 1 atoms with fields:\n   index name resname chain   resnum  residue        x        y        z occup  beta model segname index_pdb\n       5   CA     ALA     A        1        1   -8.483  -14.912   -6.726  1.00  0.00     1    PROT         5\n\n\n\n\n\n\n","category":"type"},{"location":"help/#PDBTools.Sequence","page":"Help entries","title":"PDBTools.Sequence","text":"Sequence\n\nWrapper for strings, or vectors of chars, strings, or residue names, to dispatch on  functions that operate on amino acid sequences.\n\nExample\n\njulia> seq = [\"Alanine\", \"Glutamic acid\", \"Glycine\"];\n\njulia> mass(Sequence(seq))\n257.2432\n\njulia> seq = \"AEG\";\n\njulia> mass(Sequence(seq))\n257.2432\n\n\n\n\n\n","category":"type"},{"location":"help/#AtomsBase.atomic_number-Tuple{Atom}","page":"Help entries","title":"AtomsBase.atomic_number","text":"atomic_number(atom::Atom)\n\nReturns the atomic number of an atom from its Atom structure.\n\nExample\n\njulia> using PDBTools\n\njulia> at = Atom(name=\"NT3\");\n\njulia> atomic_number(at)\n7\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools._closest-Tuple{AbstractVector, AbstractVector}","page":"Help entries","title":"PDBTools._closest","text":"closest(x,y)\n\nComputes the minimum distance between two sets of atoms and returns the indices of the atoms  and their distance. Both vector of atoms or vectors of coordinates can be used as input.\n\nExamples\n\njulia> model = wget(\"1BSX\");\n\njulia> protein = select(model,\"protein\");\n\njulia> ligand = select(model,\"resname T3\");\n\njulia> closest(ligand,protein)\n(43, 3684, 2.7775834820937417)\n\njulia> ligand[43]\n    4037   O1      T3     B        2      512  -22.568   81.625    3.159 36.59  1.00     1       -      4041\n\njulia> closest(ligand[43],protein)\n(1, 3684, 2.7775834820937417)\n\njulia> x = coor(protein)\n3994-element Vector{SVector{3, Float64}}:\n [52.884, 24.022, 35.587]\n [52.916, 24.598, 36.993]\n ⋮\n [-46.887, 86.925, 13.235]\n [-47.164, 83.593, 15.25]\n\njulia> closest(ligand,x)\n(43, 3684, 2.7775834820937417)\n\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.add_element!-Tuple{String, PDBTools.Element}","page":"Help entries","title":"PDBTools.add_element!","text":"add_element!(symbol::String, reference_element::PDBTools.Element; elements=PDBTools.elements)\n\nAdd a new element to the elements dictionary. If the element already exists, overwrite it.\n\nTo remove all custom elements, use remove_custom_elements!().\n\nExample\n\njulia> using PDBTools\n\njulia> remove_custom_elements!(); # if any\n\njulia> atoms = [ Atom(name=\"A1\"), Atom(name=\"A2\") ];\n\njulia> add_element!(\"A1\", PDBTools.elements[\"C\"])\nPDBTools.Element(:C, \"C\", \"Carbon\", 6, 12.011, true)\n\njulia> add_element!(\"A2\", PDBTools.elements[\"N\"])\nPDBTools.Element(:N, \"N\", \"Nitrogen\", 7, 14.0067, true)\n\njulia> element(atoms[1])\n\"C\"\n\njulia> element(atoms[2])\n\"N\"\n\njulia> mass(atoms)\n26.017699999999998\n\njulia> remove_custom_elements!(); \n\nHere we repeteadly call remove_custom_elements!() to guarantee the proper execution of the test codes, without any custom elements predefined.\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.add_hydrogens!-Tuple{AbstractVector{Atom}}","page":"Help entries","title":"PDBTools.add_hydrogens!","text":"add_hydrogens!(atoms::AbstractVector{Atom}; pH=7.0, obabel=\"obabel\", debug=false)\n\nAdd hydrogens to a PDB file using Open Babel. \n\nArguments\n\natoms::AbstractVector{Atom}: structure (usually PDB file of a protein) to add hydrogens to.\npH: the pH of the solution. Default is 7.0.\nobabel: path to the obabel executable. Default is \"obabel\".\ndebug: if true, print the output message from obabel. Default is false.\n\nnote: Note\nThis function requires the installation of OpenBabel. Please cite the corresponding reference if using it.\n\nExample\n\njulia> using PDBTools\n\njulia> atoms = readPDB(PDBTools.TESTPDB, \"protein and not element H\");\n\njulia> add_hydrogens!(atoms)\n   Array{Atoms,1} with 1459 atoms with fields:\n   index name resname chain   resnum  residue        x        y        z occup  beta model segname index_pdb\n       1    N     ALA     A        1        1   -9.229  -14.861   -5.481  1.00  0.00     1       -         1\n       2   CA     ALA     A        1        1   -8.483  -14.912   -6.726  1.00  0.00     1       -         2\n       3   CB     ALA     A        1        1   -9.383  -14.465   -7.880  1.00  0.00     1       -         3\n                                                       ⋮ \n    1457    H     THR     A      104      208    5.886  -10.722   -7.797  1.00  0.00     1       -      1457\n    1458    H     THR     A      104      208    5.871  -10.612   -9.541  1.00  0.00     1       -      1458\n    1459    H     THR     A      104      208    6.423  -12.076   -8.762  1.00  0.00     1       -      1459\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.add_protein_residue!-Tuple{String, PDBTools.ProteinResidue}","page":"Help entries","title":"PDBTools.add_protein_residue!","text":"add_protein_residue!(resname::String, reference_residue::PDBTools.ProteinResidue)\n\nFunction to add a custom protein residue to the list of protein residues. The function will return the ProteinResidue object that was added. To remove all custom protein residues use remove_custom_protein_residues!().\n\nExample\n\njulia> using PDBTools\n\njulia> remove_custom_protein_residues!();\n\njulia> add_protein_residue!(\"sA\", PDBTools.protein_residues[\"ALA\"])\nPDBTools.ProteinResidue(\"sA\", \"ALA\", \"A\", \"Aliphatic\", false, false, 71.037114, 71.0779, 0, true)\n\njulia> isprotein(Atom(resname=\"sA\"))\ntrue\n\njulia> remove_custom_protein_residues!(); # clean up\n\nHere we repeteadly call remove_custom_residues!() to guarantee the proper execution of the test codes, without any custom residues in the list of protein residues.\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.center_of_mass-Tuple{AbstractVector{<:Atom}}","page":"Help entries","title":"PDBTools.center_of_mass","text":"center_of_mass(atoms::AbstractVector{<:Atom})\n\nCalculate the center of mass of the atoms.\n\nExample\n\njulia> using PDBTools\n\njulia> atoms = readPDB(PDBTools.SMALLPDB);\n\njulia> center_of_mass(atoms)\n3-element StaticArraysCore.SVector{3, Float64} with indices SOneTo(3):\n  -5.584422752942997\n -13.110413157869903\n  -7.139970815730879\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.coor-Tuple{Atom}","page":"Help entries","title":"PDBTools.coor","text":"coor(atoms; selection)\n\nReturns the coordinates of the atoms. The input may be one atom (type Atom), a vector of atoms, or a Residue.  The coordinates are returned as a vector of static vectors (from StaticArrays), more specifically as a Vector{SVector{3,Float64}}.\n\nExamples\n\njulia> using PDBTools, StaticArrays \n\njulia> protein = wget(\"1LBD\");\n\njulia> coor(protein[1])\n3-element SVector{3, Float64} with indices SOneTo(3):\n 45.228\n 84.358\n 70.638\n\njulia> coor(protein[1],as=SVector{3,Float32})\n3-element SVector{3, Float32} with indices SOneTo(3):\n 45.228\n 84.358\n 70.638\n\njulia> coor(protein, \"index <= 2\")\n2-element Vector{SVector{3, Float64}}:\n [45.228, 84.358, 70.638]\n [46.08, 83.165, 70.327]\n\njulia> coor(protein, only = at -> at.resname == \"ALA\")\n110-element Vector{SVector{3, Float64}}:\n [43.94, 81.982, 70.474]\n [43.02, 80.825, 70.455]\n [41.996, 80.878, 69.34]\n ⋮\n [-17.866, 84.088, 51.741]\n [-18.496, 83.942, 52.777]\n [-15.888, 82.583, 51.706]\n  \njulia> residues = collect(eachresidue(protein));\n\njulia> coor(residues[1])\n6-element Vector{SVector{3, Float64}}:\n [45.228, 84.358, 70.638]\n [46.08, 83.165, 70.327]\n [45.257, 81.872, 70.236]\n [45.823, 80.796, 69.974]\n [47.147, 82.98, 71.413]\n [46.541, 82.639, 72.662]\n\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.distance-Tuple{StaticArraysCore.SVector, StaticArraysCore.SVector}","page":"Help entries","title":"PDBTools.distance","text":"distance(x,y)\n\nComputes the minimum distance between two sets of atoms, between an atom and a set of atoms, or simply  the distance between two atoms. The input may be a vector of Atoms, or the  coordinates that are output of the coor function. \n\nExamples\n\njulia> model = wget(\"1BSX\");\n\njulia> protein = select(model,\"protein\");\n\njulia> ligand = select(model,\"resname T3\");\n\njulia> distance(protein,ligand)\n2.7775834820937417\n\njulia> distance(protein[1],ligand[3])\n36.453551075306784\n\njulia> distance(coor(ligand),protein)\n2.7775834820937417\n\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.eachresidue-Tuple{AbstractVector{Atom}}","page":"Help entries","title":"PDBTools.eachresidue","text":"eachresidue(atoms::AbstractVector{Atom})\n\nIterator for the residues (or molecules) of a selection. \n\nExample\n\njulia> atoms = wget(\"1LBD\");\n\njulia> length(eachresidue(atoms))\n238\n\njulia> for res in eachresidue(atoms)\n         println(res)\n       end\n Residue of name SER with 6 atoms.\n   index name resname chain   resnum  residue        x        y        z  beta occup model segname index_pdb\n       1    N     SER     A      225        1   45.228   84.358   70.638 67.05  1.00     1       -         1\n       2   CA     SER     A      225        1   46.080   83.165   70.327 68.73  1.00     1       -         2\n       3    C     SER     A      225        1   45.257   81.872   70.236 67.90  1.00     1       -         3\n       4    O     SER     A      225        1   45.823   80.796   69.974 64.85  1.00     1       -         4\n       5   CB     SER     A      225        1   47.147   82.980   71.413 70.79  1.00     1       -         5\n       6   OG     SER     A      225        1   46.541   82.639   72.662 73.55  1.00     1       -         6\n\n Residue of name ALA with 5 atoms.\n   index name resname chain   resnum  residue        x        y        z  beta occup model segname index_pdb\n       7    N     ALA     A      226        2   43.940   81.982   70.474 67.09  1.00     1       -         7\n       8   CA     ALA     A      226        2   43.020   80.825   70.455 63.69  1.00     1       -         8\n       9    C     ALA     A      226        2   41.996   80.878   69.340 59.69  1.00     1       -         9\n                                                      ...\n\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.edit!-Tuple{AbstractVector{Atom}}","page":"Help entries","title":"PDBTools.edit!","text":"edit!(atoms::Vector{Atom})\n\nOpens a temporary PDB file in which the fields of the vector of atoms can be edited.   \n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.element-Tuple{Atom}","page":"Help entries","title":"PDBTools.element","text":"element(atom::Atom)\n\nReturns the element symbol, as a string, of an atom given the Atom structure. If the pdb_element is empty or \"X\", the element is inferred from the atom name.  Othwerwise, the pdb_element is returned.\n\nExample\n\njulia> using PDBTools\n\njulia> at = Atom(name=\"NT3\");\n\njulia> element(at)\n\"N\"\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.element_name-Tuple{Atom}","page":"Help entries","title":"PDBTools.element_name","text":"element_name(atom::Atom)\n\nReturns the element name of an atom given its name, or Atom structure.\n\nExample\n\njulia> using PDBTools\n\njulia> at = Atom(name=\"NT3\");\n\njulia> element_name(at)\n\"Nitrogen\"\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.element_symbol-Tuple{Atom}","page":"Help entries","title":"PDBTools.element_symbol","text":"element_symbol(atom::Atom)\n\nReturns a symbol for element name of an atom given its name, or Atom structure.\n\nExample\n\njulia> using PDBTools \n\njulia> at = Atom(name=\"NT3\");\n\njulia> element_symbol(at)\n:N\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.element_symbol_string-Tuple{Atom}","page":"Help entries","title":"PDBTools.element_symbol_string","text":"element_symbol_string(atom::Atom)\n\nReturns a string with the symbol of the element, given the Atom structure.\n\nExample\n\njulia> using PDBTools \n\njulia> at = Atom(name=\"NT3\");\n\njulia> element_symbol_string(at)\n\"N\"\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.formula-Tuple{AbstractVector{Atom}}","page":"Help entries","title":"PDBTools.formula","text":"formula(atoms::AbstractVector{Atom})\n\nReturns the molecular formula of the current selection. \n\nExample\n\njulia> using PDBTools\n\njulia> pdb  = readPDB(PDBTools.TESTPDB, \"residue 1\"); # testing PDB file\n\njulia> resname(pdb[1])\n\"ALA\"\n\njulia> formula(pdb)\nH₇C₃N₁O₁\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.getseq-Tuple{AbstractVector{Atom}, String}","page":"Help entries","title":"PDBTools.getseq","text":"getseq(Vector{Atom} or filename; selection, code)\n\nReturns the sequence of aminoacids from the vector of atoms or file name. Selections may be applied. Code defines if the output will be a one-letter, three-letter or full-residue name array.\n\nExample\n\njulia> protein = wget(\"1LBD\");\n\njulia> getseq(protein,\"residue < 3\")\n2-element Vector{String}:\n \"S\"\n \"A\"\n\njulia> getseq(protein,\"residue < 3\", code=2)\n2-element Vector{String}:\n \"SER\"\n \"ALA\"\n\njulia> getseq(protein,\"residue < 3\",code=3)\n2-element Vector{String}:\n \"Serine\"\n \"Alanine\"\n\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.mass-Tuple{Atom}","page":"Help entries","title":"PDBTools.mass","text":"mass(atom::Atom)\nmass(atoms::AbstractVector{<:Atoms})\n\nReturns the mass of an atom given its name, or Atom structure, or the total mass of a vector of Atoms. \n\nIf a mass is defined as a custom field in the the Atom structure, it is returned. Otherwise, the mass is retrieved from the element mass as inferred from the atom name.\n\nExample\n\njulia> using PDBTools\n\njulia> atoms = [ Atom(name=\"NT3\"), Atom(name=\"CA\") ];\n\njulia> mass(atoms[1])\n14.0067\n\njulia> mass(atoms)\n26.017699999999998\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.mass-Tuple{Sequence}","page":"Help entries","title":"PDBTools.mass","text":"mass(s::Sequence)\n\nReturns the mass of a sequence of amino acids, given a Sequence struct type.\n\nExamples\n\njulia> seq = [\"Alanine\", \"Glutamic acid\", \"Glycine\"];\n\njulia> mass(Sequence(seq))\n257.2432\n\njulia> seq = \"AEG\";\n\njulia> mass(Sequence(seq))\n257.2432\n\njulia> seq = [\"ALA\", \"GLU\", \"GLY\"];\n\njulia> mass(Sequence(seq))\n257.2432\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.maxmin-Tuple{AbstractVector{Atom}, String}","page":"Help entries","title":"PDBTools.maxmin","text":"maxmin(atoms::Vector{Atom}; selection)\n\nReturns the maximum and minimum coordinates of an atom vector, and the length (maximum minus minimum) in each direction. \n\nExample\n\njulia> protein = wget(\"1LBD\");\n\njulia> maxmin(protein)\n \n Minimum atom coordinates: xmin = [-29.301, 57.178, 45.668]\n Maximum atom coordinates: xmax = [47.147, 99.383, 86.886]\n Length in each direction: xlength = [76.448, 42.205, 41.217999999999996]\n\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.moveto!-Tuple{AbstractVector{<:Atom}}","page":"Help entries","title":"PDBTools.moveto!","text":"moveto!(atoms::AbstractVector{<:Atom}; center::AbstractVector{<:Real}=SVector(0.0, 0.0, 0.0))\n\nMove the center of mass of the atoms to the specified center position, which defaults to the origin.\n\nExample\n\njulia> using PDBTools\n\njulia> atoms = readPDB(PDBTools.SMALLPDB);\n\njulia> center_of_mass(atoms)\n3-element StaticArraysCore.SVector{3, Float64} with indices SOneTo(3):\n  -5.584422752942997\n -13.110413157869903\n  -7.139970815730879\n\njulia> moveto!(atoms; center = [1.0, 2.0, 3.0]);\n\njulia> center_of_mass(atoms)\n3-element StaticArraysCore.SVector{3, Float64} with indices SOneTo(3):\n 1.0\n 2.0000000000000036\n 3.0000000000000018\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.oneletter-Tuple{Union{Char, String}}","page":"Help entries","title":"PDBTools.oneletter","text":"oneletter(residue::Union{String,Char})\n\nFunction to return a one-letter residue code from the three letter code or residue name. The function is case-insensitive.\n\nExamples\n\njulia> oneletter(\"ALA\")\n\"A\"\n\njulia> oneletter(\"Glutamic acid\")\n\"E\"\n\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.printatom-Tuple{Atom}","page":"Help entries","title":"PDBTools.printatom","text":"printatom(atom::Atom)\n\nPrints an Atom structure in a human-readable format, with a title line.\n\nExample\n\njulia> using PDBTools\n\njulia> atoms = readPDB(PDBTools.TESTPDB, \"protein and residue 2\");\n\njulia> printatom(atoms[1])\n   index name resname chain   resnum  residue        x        y        z occup  beta model segname index_pdb\n      13    N     CYS     A        2        2   -6.351  -14.461   -5.695  1.00  0.00     1    PROT        13\n\njulia> atoms[1] # default show method\n      13    N     CYS     A        2        2   -6.351  -14.461   -5.695  1.00  0.00     1    PROT        13\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.readPDB","page":"Help entries","title":"PDBTools.readPDB","text":"readPDB(pdbfile::String, selection::String)\nreadPDB(pdbfile::String; only::Function = all)\n\nreadPDB(pdbdata::IOBuffer, selection::String)\nreadPDB(pdbdata::IOBuffer; only::Function = all)\n\nReads a PDB file and stores the data in a vector of type Atom. \n\nIf a selection is provided, only the atoms matching the selection will be read.  For example, resname ALA will select all the atoms in the residue ALA.\n\nIf the only function keyword is provided, only the atoms for which only(atom) is true will be read.\n\nExamples\n\njulia> protein = readPDB(\"../test/structure.pdb\")\n   Array{Atoms,1} with 62026 atoms with fields:\n   index name resname chain   resnum  residue        x        y        z  beta occup model segname index_pdb\n       1    N     ALA     A        1        1   -9.229  -14.861   -5.481  0.00  1.00     1    PROT         1\n       2  HT1     ALA     A        1        1  -10.048  -15.427   -5.569  0.00  0.00     1    PROT         2\n                                                       ⋮ \n   62025   H1    TIP3     C     9339    19638   13.218   -3.647  -34.453  0.00  1.00     1    WAT2     62025\n   62026   H2    TIP3     C     9339    19638   12.618   -4.977  -34.303  0.00  1.00     1    WAT2     62026\n\njulia> ALA = readPDB(\"../test/structure.pdb\",\"resname ALA\")\n   Array{Atoms,1} with 72 atoms with fields:\n   index name resname chain   resnum  residue        x        y        z  beta occup model segname index_pdb\n       1    N     ALA     A        1        1   -9.229  -14.861   -5.481  0.00  1.00     1    PROT         1\n       2  HT1     ALA     A        1        1  -10.048  -15.427   -5.569  0.00  0.00     1    PROT         2\n                                                       ⋮ \n    1339    C     ALA     A       95       95   14.815   -3.057   -5.633  0.00  1.00     1    PROT      1339\n    1340    O     ALA     A       95       95   14.862   -2.204   -6.518  0.00  1.00     1    PROT      1340\n\njulia> ALA = readPDB(\"../test/structure.pdb\", only = atom -> atom.resname == \"ALA\")\n   Array{Atoms,1} with 72 atoms with fields:\n   index name resname chain   resnum  residue        x        y        z  beta occup model segname index_pdb\n       1    N     ALA     A        1        1   -9.229  -14.861   -5.481  0.00  1.00     1    PROT         1\n       2  HT1     ALA     A        1        1  -10.048  -15.427   -5.569  0.00  0.00     1    PROT         2\n                                                       ⋮ \n    1339    C     ALA     A       95       95   14.815   -3.057   -5.633  0.00  1.00     1    PROT      1339\n    1340    O     ALA     A       95       95   14.862   -2.204   -6.518  0.00  1.00     1    PROT      1340\n\n\n\n\n\n","category":"function"},{"location":"help/#PDBTools.remove_custom_elements!","page":"Help entries","title":"PDBTools.remove_custom_elements!","text":"remove_custom_elements!()\n\nRemove all custom elements from the elements dictionary.\n\nExample\n\njulia> using PDBTools\n\njulia> remove_custom_elements!();\n\njulia> add_element!(\"GN\", PDBTools.elements[\"N\"])\nPDBTools.Element(:N, \"N\", \"Nitrogen\", 7, 14.0067, true)\n\njulia> element(Atom(name=\"GN\"))\n\"N\"\n\njulia> remove_custom_elements!();\n\njulia> element(Atom(name=\"GN\")) # returns `nothing`\n\n\nHere we repeteadly call remove_custom_elements!() to guarantee the proper execution of the test codes, without any custom elements predefined.\n\n\n\n\n\n","category":"function"},{"location":"help/#PDBTools.remove_custom_protein_residues!-Tuple{}","page":"Help entries","title":"PDBTools.remove_custom_protein_residues!","text":"remove_custom_protein_residues!()\n\nFunction to remove all custom protein residues from the list of protein residues.\n\nExample\n\njulia> using PDBTools\n\njulia> remove_custom_protein_residues!(); # clean up\n\njulia> add_protein_residue!(\"sA\", PDBTools.protein_residues[\"ALA\"])\nPDBTools.ProteinResidue(\"sA\", \"ALA\", \"A\", \"Aliphatic\", false, false, 71.037114, 71.0779, 0, true)\n\njulia> isprotein(Atom(resname=\"sA\"))\ntrue\n\njulia> remove_custom_protein_residues!();\n\njulia> isprotein(Atom(resname=\"sA\"))\nfalse\n\nHere we repeteadly call remove_custom_residues!() to guarantee the proper execution of the test codes, without any custom residues in the list of protein residues.\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.residue_ticks-Tuple{Union{PDBTools.EachResidue, AbstractVector{Residue}}}","page":"Help entries","title":"PDBTools.residue_ticks","text":"residue_ticks(\n    atoms (or) residues (or) residue iterator; \n    first=nothing, last=nothing, stride=1, oneletter=true, serial=true\n)\n\nReturns a tuple with residue numbers and residue names for the given atoms, to be used as tick labels in plots.\n\nThe structure data can be provided a vector of Atoms, a vector of Residues or an EachResidue iterator. \n\nfirst and last optional keyword parameters are integers that refer to the residue numbers to be included.  The stride option can be used to skip residues and declutter the tick labels.\n\nIf oneletter is false, three-letter residue codes are returned. Residues with unknown names will be  named X or XXX. \n\nIf serial=true the sequential residue index will be used as the index of the ticks. If instead serial=false, the positions will be set to the residue numbers.\n\nExamples\n\njulia> using PDBTools\n\njulia> atoms = wget(\"1LBD\", \"protein\");\n\njulia> residue_ticks(atoms; stride=50) # Vector{Atom} as input\n(1:50:201, [\"S225\", \"Q275\", \"L325\", \"L375\", \"L425\"])\n\njulia> residue_ticks(atoms; first=235, last=240, serial=false) # first=10 and resnum indexing\n([235, 236, 237, 238, 239, 240], [\"I235\", \"L236\", \"E237\", \"A238\", \"E239\", \"L240\"])\n\njulia> residue_ticks(eachresidue(atoms); stride=50) # residue iterator as input\n(1:50:201, [\"S225\", \"Q275\", \"L325\", \"L375\", \"L425\"])\n\njulia> residue_ticks(collect(eachresidue(atoms)); stride=50) # Vector{Residue} as input\n(1:50:201, [\"S225\", \"Q275\", \"L325\", \"L375\", \"L425\"])\n\nThe resulting tuple of residue numbers and labels can be used as xticks in Plots.plot, for example.\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.residuename-Tuple{Union{Char, String}}","page":"Help entries","title":"PDBTools.residuename","text":"residuename(residue::Union{String,Char})\n\nFunction to return the long residue name from other residue codes. The function is case-insensitive.\n\nExamples\n\njulia> residuename(\"A\")\n\"Alanine\"\n\njulia> residuename(\"Glu\")\n\"Glutamic Acid\"\n\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.resname-Tuple{Union{Char, String}}","page":"Help entries","title":"PDBTools.resname","text":"resname(residue::Union{String,Char})\n\nReturns the residue name, given the one-letter code or residue name. Differently from threeletter, this function will return the force-field name if available in the list of protein residues.\n\nExamples\n\njulia> resname(\"ALA\")\n\"ALA\"\n\njulia> resname(\"GLUP\")\n\"GLUP\"\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.select_with_vmd-Tuple{String, String}","page":"Help entries","title":"PDBTools.select_with_vmd","text":"select_with_vmd(inputfile::String, selection::String; vmd=\"vmd\", srcload=nothing)\nselect_with_vmd(atoms::AbstractVector{<:Atom}, selection::String; vmd=\"vmd\", srcload=nothing)\n\nSelect atoms using vmd selection syntax, with vmd in background. The input can be a file or a list of atoms.\n\nReturns a tuple with list of index (one-based) and atom names of the selection.\n\nFunction to return the selection from a input file (topology, coordinates, etc),  by calling VMD in the background.\n\nThe srcload argument can be used to load a list of scripts before loading the input file, for example with macros to define custom selection keywords.\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.stoichiometry-Tuple{AbstractVector{Atom}}","page":"Help entries","title":"PDBTools.stoichiometry","text":"stoichiometry(atoms::AbstractVector{Atom})\n\nReturns the stoichiometry of atom selection in a Formula structure. \n\nExample\n\njulia> using PDBTools\n\njulia> pdb  = readPDB(PDBTools.TESTPDB, \"water\"); # testing PDB file\n\njulia> stoichiometry(pdb)\nH₂O₁\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.threeletter-Tuple{Union{Char, String}}","page":"Help entries","title":"PDBTools.threeletter","text":"threeletter(residue::String)\n\nFunction to return the three-letter natural-amino acid residue code from the one-letter  code or residue name. The function is case-insensitive.\n\nExamples\n\njulia> threeletter(\"A\")\n\"ALA\"\n\njulia> threeletter(\"Aspartic acid\")\n\"ASP\"\n\njulia> threeletter(\"HSD\")\n\"HIS\"\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.wget-Tuple{String, String}","page":"Help entries","title":"PDBTools.wget","text":"wget(PDBid; selection)\n\nRetrieves a PDB file from the protein data bank. Selections may be applied.\n\nExample\n\njulia> protein = wget(\"1LBD\",\"chain A\")\n   Array{Atoms,1} with 1870 atoms with fields:\n   index name resname chain   resnum  residue        x        y        z  beta occup model segname index_pdb\n       1    N     SER     A      225        1   45.228   84.358   70.638 67.05  1.00     1       -         1\n       2   CA     SER     A      225        1   46.080   83.165   70.327 68.73  1.00     1       -         2\n       3    C     SER     A      225        1   45.257   81.872   70.236 67.90  1.00     1       -         3\n                                                       ⋮ \n    1868  OG1     THR     A      462      238  -27.462   74.325   48.885 79.98  1.00     1       -      1868\n    1869  CG2     THR     A      462      238  -27.063   71.965   49.222 78.62  1.00     1       -      1869\n    1870  OXT     THR     A      462      238  -25.379   71.816   51.613 84.35  1.00     1       -      1870\n\n\n\n\n\n\n","category":"method"},{"location":"help/#PDBTools.writePDB-Tuple{AbstractVector{Atom}, String, String}","page":"Help entries","title":"PDBTools.writePDB","text":"writePDB(atoms::Vector{Atom}, filename, selection; header=:auto, footer=:auto)\n\nWrite a PDB file with the atoms in atoms to filename. The selection argument is a string that can be used to select a subset of the atoms in atoms. For example, writePDB(atoms, \"test.pdb\", \"name CA\").\n\nThe header and footer arguments can be used to add a header and footer to the PDB file. If header is :auto, then a header will be added with the number of atoms in atoms. If footer is :auto, then a footer will be added with the \"END\" keyword. Either can be set to nothing if no header or footer is desired.\n\n\n\n\n\n","category":"method"},{"location":"examples/#examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Selecting-the-active-site-of-a-protein","page":"Examples","title":"Selecting the active site of a protein","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The 1BSX pdb file is a structure that contains a dimer of the thyroid hormone receptor-beta bound to the ligand T3. Here we select all residues of chain A, which is one of the monomers, that within 3.5AA of the ligand:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> using PDBTools\n\njulia> atoms = wget(\"1BSX\", \"chain A\");\n\njulia> protein = select(atoms, \"protein\");\n\njulia> ligand = select(atoms, \"resname T3\");\n\njulia> active_site_atoms = Atom[]\n       for residue in eachresidue(protein)\n           if distance(residue, ligand) < 3.5\n               append!(active_site_atoms, atom for atom in residue)\n           end\n       end\n\njulia> length(active_site_atoms)\n56\n\njulia> resname.(eachresidue(active_site_atoms))\n6-element Vector{String}:\n \"PHE\"\n \"ARG\"\n \"LEU\"\n \"ASN\"\n \"LEU\"\n \"HIS\"","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Note that Atom[] creates an empty vector of PDBTools.Atom objects, and we append to this array the list of atoms of each residue.","category":"page"},{"location":"examples/#Storing-partial-charges","page":"Examples","title":"Storing partial charges","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Here we exemplify the use of a custom field to store partial charges for all atoms in a protein:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"julia> using PDBTools\n\njulia> pdb = wget(\"1BSX\", \"protein\");\n\njulia> charges = rand(length(pdb));\n\njulia> for (i, atom) in enumerate(pdb)\n           atom.custom[:charge] = charges[i]\n       end\n\njulia> pdb[1].custom[:charge]\n0.09441681249467149\n\njulia> custom_field(pdb[1], :charge) # alternative getter function\n0.09441681249467149\n\njulia> custom_field.(pdb, :charge) # broadcast to get all charges (with the dot syntax)\n3994-element Vector{Float64}:\n 0.09441681249467149\n 0.17811534472805368\n ⋮\n 0.8254040639975442\n 0.6153943592336552","category":"page"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"Install the package using the package manager:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"julia> ] add PDBTools\n","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"and load it with","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"julia> using PDBTools\n","category":"page"},{"location":"readwrite/#Read-and-write-files","page":"Read and Write","title":"Read and write files","text":"","category":"section"},{"location":"readwrite/#Read-a-PDB-file","page":"Read and Write","title":"Read a PDB file","text":"","category":"section"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"To read a PDB file and return a vector of atoms of type Atom, do:","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"atoms = readPDB(\"file.pdb\")","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"Atom is the structure of data containing the atom index, name, residue, coordinates, etc. For example, after reading a file (as shown bellow), a list of atoms with the following structure will be generated:","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"julia> printatom(atoms[1])\n   index name resname chain   resnum  residue        x        y        z  beta occup model segname index_pdb\n       1    N     ALA     A        1        1   -9.229  -14.861   -5.481  0.00  1.00     1    PROT         1","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"The data in the Atom structure is organized as follows:","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"mutable struct Atom\n    index::Int = 0 # The sequential index of the atoms in the file\n    index_pdb::Int = 0 # The index as written in the PDB file (might be anything)\n    name::String = \"X\"\n    resname::String = \"XXX\"\n    chain::String = \"X\"\n    resnum::Int = 0 # Number of residue as written in PDB file\n    residue::Int = 0 # Sequential residue (molecule) number in file\n    x::Float64 = 0.0\n    y::Float64 = 0.0\n    z::Float64 = 0.0\n    beta::Float64 = 0.0\n    occup::Float64 = 0.0\n    model::Int = 0\n    segname::String = \"XXXX\" # Segment name (cols 73:76)\n    pdb_element::String = \"X\"\n    charge::Union{Nothing,String} = nothing\n    custom::Dict{Symbol, Any} = Dict{Symbol,Any}()\nend","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"tip: Tip\nFor all these reading and writting functions, a final argument can be provided to read or write a subset of the atoms, following the selection syntax described  in the Selection section. For example:protein = readPDB(\"file.pdb\",\"protein\")orarginines = readPDB(\"file.pdb\",\"resname ARG\")The only difference is that, if using Julia anonymous functions, the keyword is only:arginines = readPDB(\"file.pdb\", only = atom -> atom.resname == \"ARG\")The same is valid for the write function, below. ","category":"page"},{"location":"readwrite/#Retrive-from-Protein-Data-Bank","page":"Read and Write","title":"Retrive from Protein Data Bank","text":"","category":"section"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"Use the wget function to retrieve the atom data directly from the PDB database, optionally filtering the atoms with a selection:","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"julia> atoms = wget(\"1LBD\",\"name CA\")\n   index name resname chain   resnum  residue        x        y        z  beta occup model segname index_pdb\n       2   CA     SER     A      225        1   46.080   83.165   70.327 68.73  1.00     1       -         2\n       8   CA     ALA     A      226        2   43.020   80.825   70.455 63.69  1.00     1       -         8\n      13   CA     ASN     A      227        3   41.052   82.178   67.504 53.45  1.00     1       -        13\n                                                       ⋮\n    1847   CA     GLN     A      460      236  -22.650   79.082   50.023 71.46  1.00     1       -      1847\n    1856   CA     MET     A      461      237  -25.561   77.191   51.710 78.41  1.00     1       -      1856\n    1864   CA     THR     A      462      238  -26.915   73.645   51.198 82.96  1.00     1       -      1864","category":"page"},{"location":"readwrite/#Edit-a-PDB-file","page":"Read and Write","title":"Edit a PDB file","text":"","category":"section"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"The Atom structure is mutable, meaning that the fields can be edited. For example:","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"julia> atoms = readPDB(\"file.pdb\")\n   Array{PDBTools.Atom,1} with 62026 atoms with fields:\n   index name resname chain   resnum  residue        x        y        z  beta occup model segname index_pdb\n       1    N     ALA     A        1        1   -9.229  -14.861   -5.481  0.00  1.00     1    PROT         1\n       2  HT1     ALA     A        1        1  -10.048  -15.427   -5.569  0.00  0.00     1    PROT         2\n       3  HT2     ALA     A        1        1   -9.488  -13.913   -5.295  0.00  0.00     1    PROT         3\n\njulia> atoms[1].segname = \"ABCD\"\n\"ABCD\"\n\njulia> printatom(atoms[1])\n   index name resname chain   resnum  residue        x        y        z  beta occup model segname index_pdb\n       1    N     ALA     A        1        1   -9.229  -14.861   -5.481  0.00  1.00     1    ABCD         1","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"Additionally, With the edit! function, you can directly edit or view the data in a vector of Atoms in your preferred text editor. ","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"julia> edit!(atoms)","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"This will open a text editor. Here, we modified the data in the resname field of the first atom to ABC. Saving and closing the file will update the atoms array:","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"julia> printatom(atoms[1])\n   index name resname chain   resnum  residue        x        y        z  beta occup model segname index_pdb\n       1    N     ABC     A        1        1   -9.229  -14.861   -5.481  0.00  1.00     1    PROT         1","category":"page"},{"location":"readwrite/#Write-a-PDB-file","page":"Read and Write","title":"Write a PDB file","text":"","category":"section"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"To write a PDB file use the writePDB function, as:","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"writePDB(atoms,\"file.pdb\")","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"where atoms contain a list of atoms with the Atom structures.","category":"page"},{"location":"readwrite/#Read-and-write-single-atom-lines","page":"Read and Write","title":"Read and write single-atom lines","text":"","category":"section"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"PDBTools.read_atom(pdb_line): Given a line of a PDB file containing atom data, returns the data in a Atom structure. ","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"PDBTools.write_atom(atom::Atom): Given an atom in the Atom structure, returns a string formatted in the PDB format, to be written to a file. ","category":"page"},{"location":"readwrite/#Read-from-string-buffer","page":"Read and Write","title":"Read from string buffer","text":"","category":"section"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"In some cases a PDB file data may be available as a string and not a regular file. For example, when reading the output of a zipped file. In these cases, it is possible to obtain the array of atoms by reading directly the string buffer with, for example:","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"julia> pdbdata = read(pdb_file, String); # returns a string with the PDB data, to exemplify\n\njulia> atoms = readPDB(IOBuffer(pdbdata), \"protein and name CA\")\n   Array{Atoms,1} with 104 atoms with fields:\n   index name resname chain   resnum  residue        x        y        z occup  beta model segname index_pdb\n       5   CA     ALA     A        1        1   -8.483  -14.912   -6.726  1.00  0.00     1    PROT         5\n      15   CA     CYS     A        2        2   -5.113  -13.737   -5.466  1.00  0.00     1    PROT        15\n      26   CA     ASP     A        3        3   -3.903  -11.262   -8.062  1.00  0.00     1    PROT        26\n                                                       ⋮ \n    1425   CA     GLU     A      102      102    4.414   -4.302   -7.734  1.00  0.00     1    PROT      1425\n    1440   CA     CYS     A      103      103    4.134   -7.811   -6.344  1.00  0.00     1    PROT      1440\n    1454   CA     THR     A      104      104    3.244  -10.715   -8.603  1.00  0.00     1    PROT      1454","category":"page"},{"location":"readwrite/","page":"Read and Write","title":"Read and Write","text":"compat: Compat\nReading directly from IOBuffer requires PDBTools version 0.15.1 or greater.","category":"page"},{"location":"#PDBTools","page":"Home","title":"PDBTools","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PDBTools is a simple package to read and write Protein Data Bank files, select atoms, and work with their coordinates.  ","category":"page"},{"location":"#Features:","page":"Home","title":"Features:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Simple data structure: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> printatom(atoms[1])\n  index name resname chain   resnum  residue        x        y        z  beta occup model segname index_pdb\n      1   OW     SOL     X        1        1   54.370   45.310   33.970  0.00  0.00     1       -         1","category":"page"},{"location":"","page":"Home","title":"Home","text":"Selection syntax:","category":"page"},{"location":"","page":"Home","title":"Home","text":"resname ARG and name CA","category":"page"},{"location":"","page":"Home","title":"Home","text":"Allows use of Julia (possibly user-defined) functions for selection:","category":"page"},{"location":"","page":"Home","title":"Home","text":"atom -> ( atom.resname == \"ARG\" && atom.x < 10 ) || atom.name == \"N\"","category":"page"},{"location":"#Not-indicated-for:","page":"Home","title":"Not indicated for:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We do not aim to provide the fastest PDB parsing methods. If speed in reading files, returning subsets of the structures, etc., is critical to you, probably you will do better with some packages of  BioJulia,  BioStructures in particular.","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"CollapsedDocStrings = true","category":"page"},{"location":"tools/#Tools","page":"Tools","title":"Tools","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"These tools may call external programs to perform each task. Please verify the installation of  the necessary tool for each case. ","category":"page"},{"location":"tools/#Add-hydrogens-with-OpenBabel","page":"Tools","title":"Add hydrogens with OpenBabel","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"add_hydrogens!","category":"page"},{"location":"tools/#PDBTools.add_hydrogens!","page":"Tools","title":"PDBTools.add_hydrogens!","text":"add_hydrogens!(atoms::AbstractVector{Atom}; pH=7.0, obabel=\"obabel\", debug=false)\n\nAdd hydrogens to a PDB file using Open Babel. \n\nArguments\n\natoms::AbstractVector{Atom}: structure (usually PDB file of a protein) to add hydrogens to.\npH: the pH of the solution. Default is 7.0.\nobabel: path to the obabel executable. Default is \"obabel\".\ndebug: if true, print the output message from obabel. Default is false.\n\nnote: Note\nThis function requires the installation of OpenBabel. Please cite the corresponding reference if using it.\n\nExample\n\njulia> using PDBTools\n\njulia> atoms = readPDB(PDBTools.TESTPDB, \"protein and not element H\");\n\njulia> add_hydrogens!(atoms)\n   Array{Atoms,1} with 1459 atoms with fields:\n   index name resname chain   resnum  residue        x        y        z occup  beta model segname index_pdb\n       1    N     ALA     A        1        1   -9.229  -14.861   -5.481  1.00  0.00     1       -         1\n       2   CA     ALA     A        1        1   -8.483  -14.912   -6.726  1.00  0.00     1       -         2\n       3   CB     ALA     A        1        1   -9.383  -14.465   -7.880  1.00  0.00     1       -         3\n                                                       ⋮ \n    1457    H     THR     A      104      208    5.886  -10.722   -7.797  1.00  0.00     1       -      1457\n    1458    H     THR     A      104      208    5.871  -10.612   -9.541  1.00  0.00     1       -      1458\n    1459    H     THR     A      104      208    6.423  -12.076   -8.762  1.00  0.00     1       -      1459\n\n\n\n\n\n","category":"function"},{"location":"tools/#Custom-protein-residue-types","page":"Tools","title":"Custom protein residue types","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"compat: Compat\nThese functions were added in version 1.4.0.","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"It is possible to add to the list of protein residues, custom residue types.  This can be done by simply adding to the PDBTools.protein_residues dictionary of residues a new PDBTools.ProteinResidue entry. For example, here we create a new resiude type NEW with the same properties of an ALA residue. To  remove all custom protein residues, use remove_custom_protein_residues!().","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"julia> using PDBTools\n\njulia> remove_custom_protein_residues!();\n\njulia> add_protein_residue!(\"NEW\", PDBTools.protein_residues[\"ALA\"])\nPDBTools.ProteinResidue(\"NEW\", \"ALA\", \"A\", \"Aliphatic\", false, false, 71.037114, 71.0779, 0, true)\n\njulia> atom = Atom(resname=\"NEW\");\n\njulia> isprotein(atom)\ntrue\n\njulia> remove_custom_protein_residues!();","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"Here we repeteadly call remove_custom_residues!() to guarantee the proper execution of the test codes, without any custom residues in the list of protein residues.","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"add_protein_residue!\nremove_custom_protein_residues!","category":"page"},{"location":"tools/#PDBTools.add_protein_residue!","page":"Tools","title":"PDBTools.add_protein_residue!","text":"add_protein_residue!(resname::String, reference_residue::PDBTools.ProteinResidue)\n\nFunction to add a custom protein residue to the list of protein residues. The function will return the ProteinResidue object that was added. To remove all custom protein residues use remove_custom_protein_residues!().\n\nExample\n\njulia> using PDBTools\n\njulia> remove_custom_protein_residues!();\n\njulia> add_protein_residue!(\"sA\", PDBTools.protein_residues[\"ALA\"])\nPDBTools.ProteinResidue(\"sA\", \"ALA\", \"A\", \"Aliphatic\", false, false, 71.037114, 71.0779, 0, true)\n\njulia> isprotein(Atom(resname=\"sA\"))\ntrue\n\njulia> remove_custom_protein_residues!(); # clean up\n\nHere we repeteadly call remove_custom_residues!() to guarantee the proper execution of the test codes, without any custom residues in the list of protein residues.\n\n\n\n\n\n","category":"function"},{"location":"tools/#PDBTools.remove_custom_protein_residues!","page":"Tools","title":"PDBTools.remove_custom_protein_residues!","text":"remove_custom_protein_residues!()\n\nFunction to remove all custom protein residues from the list of protein residues.\n\nExample\n\njulia> using PDBTools\n\njulia> remove_custom_protein_residues!(); # clean up\n\njulia> add_protein_residue!(\"sA\", PDBTools.protein_residues[\"ALA\"])\nPDBTools.ProteinResidue(\"sA\", \"ALA\", \"A\", \"Aliphatic\", false, false, 71.037114, 71.0779, 0, true)\n\njulia> isprotein(Atom(resname=\"sA\"))\ntrue\n\njulia> remove_custom_protein_residues!();\n\njulia> isprotein(Atom(resname=\"sA\"))\nfalse\n\nHere we repeteadly call remove_custom_residues!() to guarantee the proper execution of the test codes, without any custom residues in the list of protein residues.\n\n\n\n\n\n","category":"function"},{"location":"tools/#The-SIRAH-force-field-residues-and-element-types","page":"Tools","title":"The SIRAH force-field residues and element types","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"Conveniencie functions can be created to add sets of new types of residues and atom types to the list of residues and elements. This is illustrated in the  custom_types.jl file of the source code, in this case for the residues and atom types of the SIRAH force field for Coarse-Grained protein simulations.","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"With those definitions, adding all SIRAH protein residue types and element names can be done with:","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"julia> using PDBTools \n\njulia> remove_custom_protein_residues!(); remove_custom_elements!();\n\njulia> custom_protein_residues!(SIRAH)\n┌ Warning: \n│ \n│     Residue `sX` will be interpreted as bridged Cysteine.\n│ \n└ @ PDBTools\n\njulia> custom_elements!(SIRAH)\n┌ Warning:\n│\n│     The element masses are not the coarse-grained ones. This must be fixed in the future.\n│\n└ @ PDBTools\n\njulia> sirah_pdb = readPDB(PDBTools.SIRAHPDB);\n\njulia> resname.(eachresidue(sirah_pdb))\n5-element Vector{String}:\n \"sI\"\n \"sR\"\n \"sX\"\n \"sI\"\n \"sG\"\n\njulia> getseq(sirah_pdb)\n5-element Vector{String}:\n \"I\"\n \"R\"\n \"C\"\n \"I\"\n \"G\"\n\njulia> all(isprotein.(sirah_pdb))\ntrue\n\njulia> remove_custom_protein_residues!(); remove_custom_elements!();","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"Note that the residue names of the SIRAH force-field are non-standard (sI, sR, etc.), but the sequence is properly retrieved with standard one-letter codes, and all the atoms of the structure are recognized  as being \"protein\" atoms.","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"Here we repeteadly call remove_custom_residues!() and remove_custom_elements!() to guarantee the proper execution of the test codes.","category":"page"},{"location":"tools/#Move-atoms-and-center-of-mass","page":"Tools","title":"Move atoms and center of mass","text":"","category":"section"},{"location":"tools/","page":"Tools","title":"Tools","text":"The center_of_mass function can be used to compute the center of mass of set of atoms, and the  moveto! function can be used to move the center of mass of the atoms to the origin (by default)  or to a specified position:","category":"page"},{"location":"tools/","page":"Tools","title":"Tools","text":"center_of_mass\nmoveto!","category":"page"},{"location":"tools/#PDBTools.center_of_mass","page":"Tools","title":"PDBTools.center_of_mass","text":"center_of_mass(atoms::AbstractVector{<:Atom})\n\nCalculate the center of mass of the atoms.\n\nExample\n\njulia> using PDBTools\n\njulia> atoms = readPDB(PDBTools.SMALLPDB);\n\njulia> center_of_mass(atoms)\n3-element StaticArraysCore.SVector{3, Float64} with indices SOneTo(3):\n  -5.584422752942997\n -13.110413157869903\n  -7.139970815730879\n\n\n\n\n\n","category":"function"},{"location":"tools/#PDBTools.moveto!","page":"Tools","title":"PDBTools.moveto!","text":"moveto!(atoms::AbstractVector{<:Atom}; center::AbstractVector{<:Real}=SVector(0.0, 0.0, 0.0))\n\nMove the center of mass of the atoms to the specified center position, which defaults to the origin.\n\nExample\n\njulia> using PDBTools\n\njulia> atoms = readPDB(PDBTools.SMALLPDB);\n\njulia> center_of_mass(atoms)\n3-element StaticArraysCore.SVector{3, Float64} with indices SOneTo(3):\n  -5.584422752942997\n -13.110413157869903\n  -7.139970815730879\n\njulia> moveto!(atoms; center = [1.0, 2.0, 3.0]);\n\njulia> center_of_mass(atoms)\n3-element StaticArraysCore.SVector{3, Float64} with indices SOneTo(3):\n 1.0\n 2.0000000000000036\n 3.0000000000000018\n\n\n\n\n\n","category":"function"}]
}
